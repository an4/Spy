{
  "name": "decimal.js",
  "description": "An arbitrary-precision Decimal type for JavaScript.",
  "version": "5.0.6",
  "keywords": [
    "arbitrary",
    "precision",
    "arithmetic",
    "big",
    "number",
    "decimal",
    "float",
    "biginteger",
    "bigdecimal",
    "bignumber",
    "bigint",
    "bignum"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/MikeMcl/decimal.js.git"
  },
  "main": "decimal",
  "author": {
    "name": "Michael Mclaughlin",
    "email": "M8ch88l@gmail.com"
  },
  "license": "MIT",
  "scripts": {
    "test": "node ./test/test.js",
    "build": "uglifyjs decimal.js --source-map doc/decimal.js.map -c -m -o decimal.min.js --preamble \"/* decimal.js v5.0.6 https://github.com/MikeMcl/decimal.js/LICENCE */\""
  },
  "readme": "![decimal.js](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/decimaljs.png)\r\n\r\nAn arbitrary-precision Decimal type for JavaScript.\r\n\r\n*WARNING: Version 5 brings significant API changes (see CHANGELOG). Version 4 will continue to be supported.*\r\n<br>   \r\n[![Build Status](https://travis-ci.org/MikeMcl/decimal.js.svg)](https://travis-ci.org/MikeMcl/decimal.js)\r\n\r\n## Features\r\n\r\n  - Integers and floats \r\n  - Simple but full-featured API\r\n  - Replicates many of the methods of JavaScript's `Number.prototype` and `Math` objects\r\n  - Also handles hexadecimal, binary and octal values\r\n  - Supports serialization of Decimals to a compact base-88 format for transmission or persistence \r\n  - Faster, smaller, and perhaps easier to use than JavaScript versions of Java's BigDecimal\r\n  - No dependencies\r\n  - Wide platform compatibility: uses JavaScript 1.5 (ECMAScript 3) features only\r\n  - Comprehensive [documentation](http://mikemcl.github.io/decimal.js/) and test set\r\n\r\n![API](https://raw.githubusercontent.com/MikeMcl/decimal.js/gh-pages/API.png)\r\n\r\nThe library is similar to [bignumber.js](https://github.com/MikeMcl/bignumber.js/), but here\r\nprecision is specified in terms of significant digits instead of decimal places, and all\r\ncalculations are rounded to the precision (similar to Python's decimal module) rather than just\r\nthose involving division.\r\n\r\nThis library also adds the trigonometric functions, among others, and supports non-integer powers.\r\n\r\nAnother major difference is that this library enables multiple Decimal constructors to be created\r\n each with their own configuration. This is, however, a significantly larger library than\r\n *bignumber.js* and the even smaller [big.js](https://github.com/MikeMcl/big.js/).\r\n\r\n## Load\r\n\r\nThe library is the single JavaScript file *decimal.js* (or minified, *decimal.min.js*).\r\n\r\nIt can be loaded using a script tag in an HTML document for the browser\r\n\r\n    <script src='path/to/decimal.js'></script>\r\n\r\nor as a [Node.js](http://nodejs.org) module using `require`.\r\n\r\n    var Decimal = require('decimal');\r\n\r\nFor Node, the library is available from the [npm](https://npmjs.org/) registry\r\n\r\n    $ npm install decimal.js\r\n    \r\nTo load with AMD loader libraries such as [requireJS](http://requirejs.org/):\r\n\r\n    require(['decimal'], function(Decimal) {\r\n        // Use Decimal here in local scope. No global Decimal.\r\n    });\r\n\r\n## Use\r\n\r\n*In all examples below, `var`, semicolons and `toString` calls are not shown.\r\nIf a commented-out value is in quotes it means `toString` has been called on the preceding expression.*\r\n\r\nThe library exports a single function object, `Decimal`, the constructor of Decimal instances.\r\n\r\nIt accepts a value of type number, string or Decimal.\r\n\r\n    x = new Decimal(123.4567)\r\n    y = new Decimal('123456.7e-3')\r\n    z = new Decimal(x)\r\n    x.equals(y) && y.equals(z) && x.equals(z)        // true\r\n\r\nA value can also be in binary, hexadecimal or octal if the appropriate prefix is included.\r\n\r\n    x = new Decimal('0xff.f')            // '255.9375'\r\n    y = new Decimal('0b10101100')        // '172'\r\n    z = x.plus(y)                        // '427.9375'\r\n    \r\n    z.toBinary()                         // '0b110101011.1111'\r\n    z.toBinary(13)                       // '0b1.101010111111p+8'\r\n\r\nA Decimal is immutable in the sense that it is not changed by its methods.\r\n\r\n    0.3 - 0.1                     // 0.19999999999999998\r\n    x = new Decimal(0.3)\r\n    x.minus(0.1)                  // '0.2'\r\n    x                             // '0.3'\r\n\r\nThe methods that return a Decimal can be chained.\r\n\r\n    x.dividedBy(y).plus(z).times(9).floor()\r\n    x.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').ceil()\r\n\r\nMany method names have a shorter alias.\r\n\r\n    x.squareRoot().dividedBy(y).toPower(3).equals(x.sqrt().div(y).pow(3))         // true\r\n    x.cmp(y.mod(z).neg()) == 1 && x.comparedTo(y.modulo(z).negated()) == 1        // true\r\n\r\nLike JavaScript's Number type, there are `toExponential`, `toFixed` and `toPrecision` methods,\r\n\r\n    x = new Decimal(255.5)\r\n    x.toExponential(5)              // '2.55500e+2'\r\n    x.toFixed(5)                    // '255.50000'\r\n    x.toPrecision(5)                // '255.50'\r\n    \r\nand many of the methods of JavaScript's Math object are also replicated.\r\n\r\n    Decimal.sqrt('6.98372465832e+9823')      // '8.3568682281821340204e+4911'\r\n    Decimal.pow(2, 0.0979843)                // '1.0702770511687781839'\r\n\r\nThere are `isNaN` and `isFinite` methods, as `NaN` and `Infinity` are valid `Decimal` values,\r\n\r\n    x = new Decimal(NaN)                                           // 'NaN'\r\n    y = new Decimal(Infinity)                                      // 'Infinity'\r\n    x.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()      // true\r\n    \r\nand a `toFraction` method with an optional *maximum denominator* argument\r\n\r\n    z = new Decimal(355)\r\n    pi = z.dividedBy(113)        // '3.1415929204'\r\n    pi.toFraction()              // [ '7853982301', '2500000000' ]\r\n    pi.toFraction(1000)          // [ '355', '113' ]\r\n\r\nAll calculations are rounded according to the number of significant digits and rounding mode\r\n specified by the `precision` and `rounding` properties of the Decimal constructor.\r\n\r\nAs mentioned above, multiple Decimal constructors can be created, each with their own independent\r\n configuration which applies to all Decimal numbers created from it.\r\n\r\n    // Set the precision and rounding of the default Decimal constructor\r\n    Decimal.config({ precision: 5, rounding: 4 })\r\n\r\n    // Create another Decimal constructor, optionally passing in a configuration object\r\n    Decimal10 = Decimal.clone({ precision: 10, rounding: 1 })    \r\n\r\n    x = new Decimal(5)\r\n    y = new Decimal10(5)\r\n\r\n    x.div(3)                           // '1.6667'\r\n    y.div(3)                           // '1.666666666'\r\n\r\nThe value of a Decimal is stored in a floating point format in terms of its digits, exponent and sign.\r\n\r\n    x = new Decimal(-12345.67);\r\n    x.d                            // [ 12345, 6700000 ]    digits (base 10000)\r\n    x.e                            // 4                     exponent (base 10)\r\n    x.s                            // -1                    sign\r\n\r\nFor further information see the [API](http://mikemcl.github.io/decimal.js/) reference in the *doc* directory.\r\n\r\n## Test\r\n\r\nThe library can be tested using Node.js or a browser.\r\n\r\nThe *test* directory contains the file *test.js* which runs all the tests when executed by Node, and the file *test.html* which runs all the tests when opened in a browser.\r\n\r\nTo run all the tests, from a command-line at the root directory using npm\r\n\r\n    $ npm test\r\n\r\nor at the *test* directory using Node\r\n    \r\n    $ node test\r\n    \r\nEach separate test module can also be executed individually, for example, at the *test/modules* directory\r\n\r\n    $ node toFraction\r\n\r\n\r\n## Build\r\n\r\nFor Node, if [uglify-js](https://github.com/mishoo/UglifyJS2) is installed\r\n\r\n    npm install uglify-js -g\r\n\r\nthen\r\n\r\n    npm run build\r\n\r\nwill create *decimal.min.js*, and a source map will also be added to the *doc* directory.\r\n\r\n## Feedback\r\n\r\n<a href='mailto:M8ch88l@gmail.com'>M8ch88l@gmail.com</a>\r\n\r\nBTC 16MjxmTB5EZxY5Uk9xyhfsu4n9gYxEJYkY\r\n\r\n## Licence\r\n\r\nMIT Expat.\r\n\r\nSee *LICENCE.md*\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/MikeMcl/decimal.js/issues"
  },
  "_id": "decimal.js@5.0.6",
  "_from": "decimal.js@5.0.6"
}
